name: Pre-release Template

on:
  workflow_call:
    inputs:
      main_branch:
        required: false
        type: string
      feature_branches:
        required: false
        type: string
      release_branches:
        required: false
        type: string
      hotfix_branches:
        required: false
        type: string
    outputs:
      version:
        description: The new generated version
        value: ${{ jobs.create_release.outputs.version }}

jobs:
  get_last_version:
    name: Get last version
    runs-on: ubuntu-latest
    outputs:
      last_version: ${{ steps.get_last_version.outputs.last_version }}
      is_release_candidate: ${{ steps.get_last_version.outputs.is_release_candidate }}
      is_breaking_change: ${{ steps.get_last_version.outputs.is_breaking_change }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get last version
        id: get_last_version
        uses: davidsonbrsilva/versioning-workflow/actions/latest-version-obtaining@v1
        with:
          main_branch: ${{ inputs.main_branch }}

  check_major_change:
    name: Check major change
    runs-on: ubuntu-latest
    outputs:
      is_major_change: ${{ steps.check_major_change.outputs.is_major_change }}
      commit_message: ${{ steps.get_commit_message.outputs.commit_message }}
    needs: get_last_version
    steps:
      - name: Get commit message
        id: get_commit_message
        run: |
          commit_sha=${{ github.event.pull_request.head.sha }}
          commit_message=$(curl -sSL -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/commits/$commit_sha" \
            | jq -r '.commit.message' | head -n 1)
          echo "commit_message=$commit_message" >> $GITHUB_OUTPUT
          echo "Last commit message: '$commit_message'"
      - name: Check if new commit is major change
        id: check_major_change
        run: |
          commit_message="${{ steps.get_commit_message.outputs.commit_message }}"
          major_change_regex="(^FIRST RELEASE:.*$)|(^BREAKING CHANGE:.*$)|(^.*[^[:space:]]+!:.*$)"

          if [[ "$commit_message" =~ $major_change_regex ]]; then
            echo "A major change was identified."
            echo "is_major_change=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "No major change was identified."
          exit 0
    if: ${{ !needs.get_last_version.outputs.is_breaking_change }}

  generate_breaking_change_version:
    name: Generate breaking change version
    runs-on: ubuntu-latest
    needs: [get_last_version, check_major_change]
    outputs:
      version: ${{ steps.generate_next_release.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate next release version
        id: generate_next_release
        uses: davidsonbrsilva/versioning-workflow/actions/release-versioning@v1
        with:
          commit_message: ${{ needs.check_major_change.outputs.commit_message }}
          last_version: ${{ needs.get_last_version.outputs.last_version }}
          feature_branches: ${{ inputs.feature_branches }}
          release_branches: ${{ inputs.release_branches }}
          hotfix_branches: ${{ inputs.hotfix_branches }}
    if: ${{ needs.check_major_change.outputs.is_major_change == 'true' }}

  generate_first_release_candidate_version:
    name: Generate first release candidate version
    runs-on: ubuntu-latest
    needs: [get_last_version, check_major_change]
    outputs:
      version: ${{ steps.generate_next_release.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate next release version
        id: generate_next_release
        uses: davidsonbrsilva/versioning-workflow/actions/release-versioning@v1
        with:
          origin_branch: ${{ github.head_ref }}
          head_commit: ${{ github.event.pull_request.head.sha }}
          base_commit: ${{ github.event.pull_request.base.sha }}
          last_version: ${{ needs.get_last_version.outputs.last_version }}
          feature_branches: ${{ inputs.feature_branches }}
          release_branches: ${{ inputs.release_branches }}
          hotfix_branches: ${{ inputs.hotfix_branches }}
    if: |
      always() && !failure() && !cancelled() &&
      !needs.check_major_change.outputs.is_major_change && !needs.get_last_version.outputs.is_release_candidate

  add_release_candidate_suffix:
    name: Add release candidate suffix
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.add_rc_suffix.outputs.version }}
    needs:
      [
        get_last_version,
        check_major_change,
        generate_breaking_change_version,
        generate_first_release_candidate_version,
      ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Add release candidate suffix
        id: add_rc_suffix
        uses: davidsonbrsilva/versioning-workflow/actions/release-candidate-suffix-adding@feature/applying-code-cleanup
        with:
          version: ${{ needs.generate_breaking_change_version.outputs.version || needs.generate_first_release_candidate_version.outputs.version || needs.get_last_version.outputs.last_version}}
    if: |
      always() && !failure() && !cancelled()

  create_release:
    name: Create release candidate
    runs-on: ubuntu-latest
    needs: [add_release_candidate_suffix]
    permissions:
      contents: write
    outputs:
      version: ${{ steps.create_release.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release
        id: create_release
        uses: davidsonbrsilva/versioning-workflow/actions/release-creation@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          version: ${{ needs.add_release_candidate_suffix.outputs.version }}
          target_commit: ${{ github.event.pull_request.head.sha }}
          pre_release: true
    if: always() && !failure() && !cancelled()
