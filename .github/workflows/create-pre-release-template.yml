name: Pre-release Template

on:
  workflow_call:
    outputs:
      version:
        description: The new generated version
        value: ${{ jobs.create_release.outputs.version }}

jobs:
  get_last_version:
    name: Get last version
    runs-on: ubuntu-latest
    outputs:
      last_version: ${{ steps.get_last_version.outputs.last_version }}
      is_release_candidate: ${{ steps.get_last_version.outputs.is_release_candidate }}
      is_breaking_change: ${{ steps.get_last_version.outputs.is_breaking_change }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get last version
        id: get_last_version
        uses: davidsonbrsilva/versioning-workflow/actions/latest-version-obtaining@hotfix/fixing-major-changes-detection

  check_major_change:
    name: Check major change
    runs-on: ubuntu-latest
    outputs:
      is_major_change: ${{ steps.check_major_change.outputs.is_major_change }}
    needs: get_last_version
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if new commit is major change
        id: check_major_change
        run: |
          commit_message=${{ github.event.head_commit.message }}
          major_change_regex="(^FIRST RELEASE:.*$)|(^BREAKING CHANGE:.*$)|(^[^\s]+!:.*$)"

          if [[ "$commit_message" =~ $breaking_change_regex ]]; then
            echo "A major change was identified."
            echo "is_major_change=true >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "No major change was identified."
          exit 0
    if: ${{ !needs.get_last_version.outputs.is_breaking_change }}

  generate_breaking_change_version:
    name: Generate breaking change version
    runs-on: ubuntu-latest
    needs: [get_last_version, check_major_change]
    outputs:
      version: ${{ steps.generate_next_release.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate next release version
        id: generate_next_release
        uses: davidsonbrsilva/versioning-workflow/actions/release-versioning@hotfix/fixing-major-changes-detection
        with:
          commit_message: ${{ github.event.head_commit.message }}
          last_version: ${{ needs.get_last_version.outputs.last_version }}
    if: ${{ needs.check_major_change.outputs.is_major_change == 'true' }}

  generate_first_release_candidate_version:
    name: Generate first release candidate version
    runs-on: ubuntu-latest
    needs: [get_last_version, check_major_change]
    outputs:
      version: ${{ steps.generate_next_release.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate next release version
        id: generate_next_release
        uses: davidsonbrsilva/versioning-workflow/actions/release-versioning@hotfix/fixing-major-changes-detection
        with:
          origin_branch: ${{ github.head_ref }}
          head_commit: ${{ github.event.pull_request.head.sha }}
          base_commit: ${{ github.event.pull_request.base.sha }}
          last_version: ${{ needs.get_last_version.outputs.last_version }}
    if: ${{ !needs.check_major_change.outputs.is_major_change }}

  add_release_candidate_version:
    name: Add release candidate version
    runs-on: ubuntu_latest
    outputs:
      version: ${{ steps.add_rc_suffix.outputs.version }}
    needs:
      [
        get_last_version,
        generate_breaking_change_version,
        generate_first_release_candidate_version,
      ]
    steps:
      - name: Add release candidate suffix
        id: add_rc_suffix
        run: |
          version=${{ needs.generate_breaking_change_version.outputs.version }} || ${{ needs.generate_first_release_candidate_version.outputs.version }}
          new_tag=$version-rc-1
          echo "version=$new_tag" >> $GITHUB_OUTPUT
          echo "New generated version: $new_tag."
    if: ${{ !needs.get_last_version.outputs.is_release_candidate }}

  increment_release_candidate_version:
    name: Increment release candidate version
    runs-on: ubuntu-latest
    needs: get_last_version
    outputs:
      version: ${{ steps.increment_rc_suffix.outputs.version }}
    steps:
      - name: Increment release candidate suffix
        id: increment_rc_suffix
        run: |
          regex="([0-9]+)\.([0-9]+)\.([0-9]+)-rc-([0-9]+)"

          if [[ ${{ needs.get_last_version.outputs.last_version }} =~ $regex ]]; then
            major_version="${BASH_REMATCH[1]}"
            minor_version="${BASH_REMATCH[2]}"
            patch_version="${BASH_REMATCH[3]}"
            rc_version="${BASH_REMATCH[4]}"

            rc_version=$((rc_version + 1))
            new_tag=${major_version}.${minor_version}.${patch_version}-rc-${rc_version}
            echo "version=$new_tag" >> $GITHUB_OUTPUT
            echo "New generated version: $new_tag."
            exit 0
          fi

          echo "The version ${{ needs.get_last_version.outputs.last_version }} does not match a valid release candidate version."
          exit 1
    if: ${{ needs.get_last_version.outputs.is_release_candidate == 'true' }}

  create_release:
    name: Create release
    runs-on: ubuntu-latest
    needs: [add_release_candidate_version, increment_release_candidate_version]
    permissions:
      contents: write
    outputs:
      version: ${{ steps.create_release.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release
        id: create_release
        uses: davidsonbrsilva/versioning-workflow/actions/release-creation@hotfix/fixing-major-changes-detection
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          version: ${{ needs.add_release_candidate_version.outputs.version || needs.increment_release_candidate_version.outputs.version }}
          target_commit: ${{ github.event.pull_request.head.sha }}
          pre_release: true
    if: |
      always() &&
      ((needs.add_release_candidate_version.result == 'success' && needs.increment_release_candidate_version.result == 'skipped') ||
      (needs.add_release_candidate_version.result == 'skipped' && needs.increment_release_candidate_version.result == 'success')
      )
